// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projet_5_App.Data;

#nullable disable

namespace Projet_5_App.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250415151557_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Projet_5_App.Models.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mazda"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Jeep"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Renault"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Volkswagen"
                        });
                });

            modelBuilder.Entity("Projet_5_App.Models.Entities.CarForSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("AvailabilityDate")
                        .HasColumnType("date");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("SalePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Trim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VinCode")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("CarsForSale");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailabilityDate = new DateOnly(2025, 4, 7),
                            BrandId = 1,
                            Deleted = false,
                            IsAvailable = true,
                            Model = "Miata",
                            PurchaseDate = new DateOnly(2025, 1, 7),
                            PurchasePrice = 1800.0m,
                            SalePrice = 9900.0m,
                            Trim = "LE",
                            VinCode = "YVV6DV4S59YH60VVH",
                            Year = 2019
                        },
                        new
                        {
                            Id = 2,
                            AvailabilityDate = new DateOnly(2025, 4, 7),
                            BrandId = 2,
                            Deleted = false,
                            IsAvailable = true,
                            Model = "Liberty",
                            PurchaseDate = new DateOnly(2025, 4, 2),
                            PurchasePrice = 4500.0m,
                            SalePrice = 5350.0m,
                            Trim = "Sport",
                            VinCode = "L5KJ1AE9KZ0NUYHL0",
                            Year = 2007
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            Deleted = false,
                            IsAvailable = false,
                            Model = "Scénic",
                            PurchaseDate = new DateOnly(2025, 4, 4),
                            PurchasePrice = 1800.0m,
                            SalePrice = 2990.0m,
                            Trim = "TCe",
                            VinCode = "HA7NZMD2URDCXCYJ9",
                            Year = 2007
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 4,
                            Deleted = false,
                            IsAvailable = false,
                            Model = "Explorer",
                            PurchaseDate = new DateOnly(2025, 4, 5),
                            PurchasePrice = 24350.0m,
                            SalePrice = 25950.0m,
                            Trim = "XLT",
                            VinCode = "EHT5HDBMUAMR4AJL6",
                            Year = 2017
                        },
                        new
                        {
                            Id = 5,
                            AvailabilityDate = new DateOnly(2025, 4, 9),
                            BrandId = 5,
                            Deleted = false,
                            IsAvailable = true,
                            Model = "Civic",
                            PurchaseDate = new DateOnly(2025, 4, 6),
                            PurchasePrice = 4000.0m,
                            SalePrice = 4975.0m,
                            Trim = "LX",
                            VinCode = "KSUCFCDJWRH3ZL3MS",
                            Year = 2008
                        },
                        new
                        {
                            Id = 6,
                            AvailabilityDate = new DateOnly(2025, 4, 10),
                            BrandId = 6,
                            Deleted = false,
                            IsAvailable = true,
                            Model = "GTI",
                            PurchaseDate = new DateOnly(2025, 4, 6),
                            PurchasePrice = 15250.0m,
                            SalePrice = 16190.0m,
                            Trim = "S",
                            VinCode = "NXJ2K11E7SR061YVR",
                            Year = 2016
                        },
                        new
                        {
                            Id = 7,
                            AvailabilityDate = new DateOnly(2025, 4, 11),
                            BrandId = 4,
                            Deleted = false,
                            IsAvailable = true,
                            Model = "Edge",
                            PurchaseDate = new DateOnly(2025, 4, 7),
                            PurchasePrice = 10990.0m,
                            SalePrice = 12440.0m,
                            Trim = "SEL",
                            VinCode = "9JVHR4BJ6PC1NUXVJ",
                            Year = 2013
                        });
                });

            modelBuilder.Entity("Projet_5_App.Models.Entities.Repair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarForSaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsRepaired")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarForSaleId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("Projet_5_App.Models.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarForSaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateOnly>("SaleDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CarForSaleId")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Projet_5_App.Models.Entities.CarForSale", b =>
                {
                    b.HasOne("Projet_5_App.Models.Entities.Brand", "Brand")
                        .WithMany("CarsForSale")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Projet_5_App.Models.Entities.Repair", b =>
                {
                    b.HasOne("Projet_5_App.Models.Entities.CarForSale", "CarForSale")
                        .WithMany("Repairs")
                        .HasForeignKey("CarForSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarForSale");
                });

            modelBuilder.Entity("Projet_5_App.Models.Entities.Sale", b =>
                {
                    b.HasOne("Projet_5_App.Models.Entities.CarForSale", "CarForSale")
                        .WithOne("Sale")
                        .HasForeignKey("Projet_5_App.Models.Entities.Sale", "CarForSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarForSale");
                });

            modelBuilder.Entity("Projet_5_App.Models.Entities.Brand", b =>
                {
                    b.Navigation("CarsForSale");
                });

            modelBuilder.Entity("Projet_5_App.Models.Entities.CarForSale", b =>
                {
                    b.Navigation("Repairs");

                    b.Navigation("Sale");
                });
#pragma warning restore 612, 618
        }
    }
}
